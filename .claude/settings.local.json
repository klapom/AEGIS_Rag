{
  "permissions": {
    "allow": [
      "Bash(poetry run pip install:*)",
      "Bash(git push:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(git reset:*)",
      "Bash(poetry add:*)",
      "Bash(gh run download:*)",
      "Bash(timeout:*)",
      "Bash(where uv)",
      "Bash(uv run pytest:*)",
      "Bash(git rev-parse:*)",
      "Bash(git log:*)",
      "Bash(pytest:*)",
      "Bash(docker build:*)",
      "Bash(gh api:*)",
      "Bash(test:*)",
      "Bash(dir:*)",
      "Bash(poetry:*)",
      "Bash(poetry env use:*)",
      "Bash(if exist poetry.lock del poetry.lock)",
      "Bash(gh run watch:*)",
      "Bash(python -c:*)",
      "Bash(python -m pytest:*)",
      "Bash(python -m pip list:*)",
      "Bash(python -m pip show:*)",
      "Bash(python scripts/*.py:*)",
      "Bash(python tests/*.py:*)",
      "Bash(poetry install:*)",
      "Bash(poetry add:*)",
      "Bash(poetry remove:*)",
      "Bash(poetry update:*)",
      "Bash(poetry show:*)",
      "Bash(poetry check:*)",
      "Bash(poetry lock:*)",
      "Bash(poetry run:*)",
      "Bash(pip install -e .:*)",
      "Bash(pip install --upgrade pip:*)",
      "Bash(pip list:*)",
      "Bash(pip show:*)",
      "Bash(pip freeze:*)",
      "Bash(uv pip:*)",
      "Bash(uv venv:*)",
      "Bash(uv sync:*)",
      "Bash(pytest:*)",
      "Bash(black:*)",
      "Bash(ruff check:*)",
      "Bash(ruff format:*)",
      "Bash(mypy:*)",
      "Bash(bandit -r src:*)",
      "Bash(safety check:*)",
      "Bash(pre-commit run:*)",
      "Bash(pre-commit install:*)",
      "Bash(pre-commit autoupdate:*)",
      "Bash(git status:*)",
      "Bash(git diff:*)",
      "Bash(git log:*)",
      "Bash(git show:*)",
      "Bash(git branch:*)",
      "Bash(git remote -v:*)",
      "Bash(git fetch:*)",
      "Bash(git pull:*)",
      "Bash(git add:*)",
      "Bash(git reset HEAD:*)",
      "Bash(git restore:*)",
      "Bash(git stash:*)",
      "Bash(git checkout:*)",
      "Bash(git switch:*)",
      "Bash(git merge:*)",
      "Bash(git rebase:*)",
      "Bash(git tag:*)",
      "Bash(git blame:*)",
      "Bash(git commit -m:*)",
      "Bash(git commit --amend:*)",
      "Bash(docker compose up:*)",
      "Bash(docker compose down:*)",
      "Bash(docker compose ps:*)",
      "Bash(docker compose logs:*)",
      "Bash(docker compose exec:*)",
      "Bash(docker compose restart:*)",
      "Bash(docker compose stop:*)",
      "Bash(docker compose start:*)",
      "Bash(docker compose pull:*)",
      "Bash(docker compose build:*)",
      "Bash(docker compose config:*)",
      "Bash(docker ps:*)",
      "Bash(docker images:*)",
      "Bash(docker logs:*)",
      "Bash(docker exec -it:*)",
      "Bash(docker inspect:*)",
      "Bash(docker stats:*)",
      "Bash(cat:*)",
      "Bash(head:*)",
      "Bash(tail:*)",
      "Bash(less:*)",
      "Bash(more:*)",
      "Bash(grep:*)",
      "Bash(ls:*)",
      "Bash(tree:*)",
      "Bash(find:*)",
      "Bash(wc:*)",
      "Bash(file:*)",
      "Bash(stat:*)",
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(cp:*)",
      "Bash(mv:*)",
      "Bash(pwd:*)",
      "Bash(cd:*)",
      "Bash(uvicorn src.api.main:app:*)",
      "Bash(redis-cli ping:*)",
      "Bash(redis-cli info:*)",
      "Bash(redis-cli --scan:*)",
      "Bash(cypher-shell:*)",
      "Bash(curl http://localhost:6333:*)",
      "Bash(curl http://localhost:7474:*)",
      "Bash(curl http://localhost:11434:*)",
      "Bash(which:*)",
      "Bash(env | grep -v SECRET:*)",
      "Bash(env | grep -v PASSWORD:*)",
      "Bash(printenv PATH:*)",
      "Bash(uname -a:*)",
      "Bash(hostname:*)",
      "Bash(uptime:*)",
      "Bash(ps aux:*)",
      "Bash(netstat -tulpn:*)",
      "Bash(lsof -i:*)",
      "Bash(python scripts/check_adr.py:*)",
      "Bash(python scripts/check_naming.py:*)",
      "Bash(bash scripts/setup_databases.sh:*)",
      "Bash(python scripts/migrate.py --dry-run:*)",
      "Bash(python scripts/benchmark.py:*)",
      "Bash(ollama:*)",
      "Bash(pwsh:*)",
      "Bash(powershell:*)",
      "Bash(New-Item -ItemType File -Path \"c:\\Users\\Klaus Pommer\\OneDrive - Pommer IT-Consulting GmbH\\99_Studium_Klaus\\AEGIS_Rag\\tests\\unit\\components\\graph_rag\\__init__.py\" -Force)",
      "Bash(.venvScriptspython.exe -m pytest tests/unit/agents/test_graph_query_agent.py::TestGraphQueryAgent::test_process_with_valid_query -v --tb=short)",
      "Bash(where python)",
      "Bash(gh workflow run:*)",
      "Bash(if exist \"docs\\SPRINT_7_PLAN.md\" del \"docs\\SPRINT_7_PLAN.md\")",
      "Bash(python -m py_compile:*)",
      "Bash(python -m black:*)",
      "Bash(python -m ruff check:*)",
      "Bash(paste:*)",
      "Bash(awk:*)",
      "Read(//c/**)",
      "Bash(findstr:*)",
      "Bash(curl:*)",
      "Bash(docker exec:*)",
      "Bash(rm poetry.lock)",
      "Bash(\"C:\\Users\\Klaus Pommer\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\aegis-rag--u84tAYU-py3.12\\Scripts\\python.exe\" -m pip install \"tenacity>=8.1.0,<9.0.0\" --upgrade)",
      "Bash(\"C:\\Users\\Klaus Pommer\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\aegis-rag--u84tAYU-py3.12\\Scripts\\python.exe\" -m pip install \"graphiti-core>=0.3.0,<0.4.0\")",
      "Bash(if exist datalightrag rmdir /s /q datalightrag)",
      "Bash(wmic OS get:*)",
      "Bash(docker info:*)",
      "Bash(where:*)",
      "Bash(cmd /c \"if exist \"\"%USERPROFILE%\\.wslconfig\"\" (type \"\"%USERPROFILE%\\.wslconfig\"\") else (echo File does not exist)\")",
      "Bash(for i in {1..6})",
      "Bash(do sleep 10)",
      "Bash(break)",
      "Bash(echo:*)",
      "Bash(done)",
      "Bash(docker restart:*)",
      "Bash(wsl --shutdown)",
      "Bash(python:*)",
      "Bash(tee:*)",
      "Bash(ping:*)",
      "Bash(tasklist:*)",
      "Read(//c/Users/Klaus Pommer/AppData/Local/pypoetry/Cache/virtualenvs/aegis-rag--u84tAYU-py3.12/Lib/site-packages/lightrag/**)",
      "Bash(del SPRINT_9_FEATURES_9.1_9.2_IMPLEMENTATION_SUMMARY.md SPRINT_9_SUBAGENT2_IMPLEMENTATION_SUMMARY.md SPRINT_9_SUBAGENT4_SUMMARY.md)"
    ],
    "deny": [],
    "ask": [
      "Bash(git push:*)",
      "Bash(git reset --hard:*)",
      "Bash(git clean -fd:*)",
      "Bash(git rm:*)",
      "Bash(rm:*)",
      "Bash(rmdir:*)",
      "Bash(redis-cli del:*)",
      "Bash(redis-cli flushdb:*)",
      "Bash(redis-cli flushall:*)",
      "Bash(docker rm:*)",
      "Bash(docker rmi:*)",
      "Bash(docker volume rm:*)",
      "Bash(docker network rm:*)",
      "Bash(docker system prune:*)",
      "Bash(kubectl:*)",
      "Bash(helm:*)",
      "Bash(terraform apply:*)",
      "Bash(aws:*)",
      "Bash(gcloud:*)"
    ]
  }
}
