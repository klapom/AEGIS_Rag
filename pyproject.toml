[tool.poetry]
name = "aegis-rag"
version = "0.1.0"
description = "Agentic Enterprise Graph Intelligence System - Production-ready RAG with Multi-Agent Orchestration"
authors = ["AEGIS RAG Team <team@aegis-rag.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/aegis-rag/aegis-rag"
repository = "https://github.com/aegis-rag/aegis-rag"
documentation = "https://docs.aegis-rag.com"
keywords = ["rag", "llm", "agents", "vector-search"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
packages = [{include = "src"}]

[tool.poetry.dependencies]
# Core Python
python = ">=3.11,<3.13"  # Limited by graspologic dependency

# Web Framework (Sprint 2: REST API)
fastapi = "^0.115.0"
uvicorn = {extras = ["standard"], version = "^0.30.0"}
pydantic = "^2.9.0"
pydantic-settings = "^2.5.0"

# Data Ingestion & RAG (Sprint 2: Document Ingestion)
# Updated to latest versions with better ollama compatibility
llama-index-core = "^0.14.3"  # Upgraded for newer ollama packages
llama-index-llms-ollama = "^0.8.0"  # Requires core >=0.14.3, ollama >=0.5.1
llama-index-embeddings-ollama = "^0.8.3"  # Requires core >=0.13.0, ollama >=0.3.1 (no upper limit!)
llama-index-readers-file = "^0.5.4"  # Latest version
llama-index-vector-stores-qdrant = "^0.8.6"  # For index_documents.py script (requires core >=0.13.0)

# Vector Database (Sprint 2: Qdrant)
qdrant-client = "~1.11.0"  # Pin to 1.11.x (compatible with Qdrant server v1.11.0)

# LLM Provider (Sprint 2: Ollama)
# Updated to >=0.6.0 for langchain-ollama 1.0.0 compatibility
ollama = ">=0.6.0,<1.0.0"

# Hybrid Search (Sprint 2: BM25)
rank-bm25 = "^0.2.2"

# Reranking (Sprint 3: Cross-Encoder Reranking)
sentence-transformers = "^3.3.1"  # HuggingFace cross-encoder models

# Evaluation (Sprint 3: RAGAS)
ragas = "^0.3.7"  # RAG evaluation framework (0.3.7 for better Ollama support)
datasets = "^4.0.0"  # HuggingFace datasets for evaluation (>=4.0 required by ragas 0.3.7)

# Utilities
python-dotenv = "^1.0.0"
tenacity = ">=8.1.0,<9.0.0"  # Downgraded for graphiti-core compatibility (Sprint 8)
structlog = "^24.4.0"
httpx = "^0.27.0"
aiofiles = "^24.1.0"
pyyaml = "^6.0.0"
python-multipart = "^0.0.20"  # Updated for Gradio compatibility
numpy = "^1.26.0"  # For vector operations in consolidation
apscheduler = "^3.10.0"  # Cron-based scheduling for memory consolidation (Sprint 9)

# Monitoring (Sprint 2: Metrics)
prometheus-client = "^0.21.0"
slowapi = "^0.1.9"  # Rate limiting

# Database Clients (Sprint 2+: Health Checks, Sprint 5+: Graph DB)
neo4j = "^5.14.0"  # Neo4j driver for health checks (Sprint 5: Graph RAG)
redis = {extras = ["asyncio"], version = "^5.0.0"}  # Redis with async support (Sprint 7: Memory)

# Security & Authentication (Sprint 2: P1 Security)
python-jose = {extras = ["cryptography"], version = "^3.3.0"}  # JWT tokens
passlib = {extras = ["bcrypt"], version = "^1.7.4"}  # Password hashing

# LangGraph & LangChain (Sprint 4: Multi-Agent Orchestration)
langgraph = "^0.6.10"
langchain-core = "^1.0.0"  # Upgraded for langchain-ollama 1.0.0
langchain-ollama = "^1.0.0"  # Latest version, requires ollama>=0.6.0
# Note: Sprint 4 uses ollama.AsyncClient directly for LLM calls

# LightRAG & Graph Analysis (Sprint 5: Graph RAG)
lightrag-hku = "^1.4.9"  # LightRAG for knowledge graph construction
networkx = "^3.2"  # Graph algorithms
graspologic = "^3.4.1"  # Graph statistics and community detection

# Graphiti Memory (Sprint 7: Episodic Memory)
graphiti-core = "^0.3.0"  # Episodic memory with temporal graphs

# UI Framework (Sprint 10: Gradio MVP)
gradio = "^5.49.0"  # Gradio for rapid prototyping UI
docx2txt = "^0.9"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.0.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"

# Code Quality
ruff = "^0.14.0"  # Upgraded for Gradio 5.x compatibility
black = "^24.8.0"
mypy = "^1.11.0"
bandit = "^1.7.9"

# Type Stubs
types-pyyaml = "^6.0.0"
types-aiofiles = "^24.1.0"
types-python-jose = "^3.3.4"
types-passlib = "^1.7.7"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ============================================================================
# Tool Configurations
# ============================================================================

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/**/*" = ["S101", "PLR2004"]

[tool.ruff.isort]
known-first-party = ["src"]

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
follow_imports = "normal"
pretty = true

[[tool.mypy.overrides]]
module = [
    "qdrant_client.*",
    "llama_index.*",
    "ollama.*",
    "rank_bm25.*",
    "ragas.*",
    "datasets.*",
    "lightrag.*",
    "networkx.*",
    "graspologic.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
pythonpath = ["src"]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--tb=short",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "sprint8: Sprint 8 critical path E2E tests",
    "slow: Slow tests (>5s execution time)",
]
asyncio_mode = "auto"
