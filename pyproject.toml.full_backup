[tool.poetry]
name = "aegis-rag"
version = "0.1.0"
description = "Agentic Enterprise Graph Intelligence System - Production-ready RAG with Multi-Agent Orchestration"
authors = ["AEGIS RAG Team <team@aegis-rag.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/aegis-rag/aegis-rag"
repository = "https://github.com/aegis-rag/aegis-rag"
documentation = "https://docs.aegis-rag.com"
keywords = ["rag", "llm", "agents", "langgraph", "vector-search", "graph-rag"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.dependencies]
# Core Python
python = "^3.11"

# Web Framework
fastapi = "^0.115.0"
uvicorn = {extras = ["standard"], version = "^0.30.0"}
pydantic = "^2.9.0"
pydantic-settings = "^2.5.0"

# LLM & Agent Orchestration
langgraph = "^0.2.0"
langchain-core = "^0.3.0"
langchain-ollama = "^0.2.0"
langchain-openai = "^0.2.0"  # Optional for Azure OpenAI
langchain-anthropic = "^0.2.0"  # Optional fallback
# langgraph-checkpoint-postgres = "^0.2.0"  # Optional, not needed for Sprint 2

# Data Ingestion & RAG
llama-index = "^0.11.0"
llama-index-llms-ollama = "^0.4.0"
llama-index-embeddings-ollama = "^0.4.0"
llama-index-embeddings-openai = "^0.2.0"  # Optional for Azure
llama-index-vector-stores-qdrant = "^0.3.0"
llama-index-graph-stores-neo4j = "^0.3.0"
llama-index-llms-openai = "^0.2.0"  # Optional for Azure

# LLM Providers
ollama = "^0.3.0"
openai = "^1.40.0"  # Optional for Azure OpenAI
anthropic = "^0.34.0"  # Optional

# Vector Database
qdrant-client = "^1.11.0"

# Graph Database
neo4j = "^5.24.0"

# Memory & Caching
redis = "^5.0.0"
graphiti-core = {git = "https://github.com/getzep/graphiti.git", optional = true}

# GraphRAG
lightrag-hku = {git = "https://github.com/HKUDS/LightRAG.git", optional = true}

# Utilities
python-dotenv = "^1.0.0"
tenacity = "^9.0.0"
structlog = "^24.4.0"
httpx = "^0.27.0"
aiofiles = "^24.1.0"
pyyaml = "^6.0.0"
python-multipart = "^0.0.9"

# MCP (Model Context Protocol) - Not needed for Sprint 2
# mcp = "^1.0.0"

# Hybrid Search
rank-bm25 = "^0.2.2"

# Monitoring & Observability
prometheus-client = "^0.20.0"
langsmith = "^0.1.0"

# Security
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-jwt = "^4.1.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.0.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
pytest-xdist = "^3.6.0"
faker = "^30.0.0"
locust = "^2.29.0"
responses = "^0.25.0"
pytest-httpx = "^0.30.0"

# Code Quality
ruff = "^0.6.0"
black = "^24.8.0"
mypy = "^1.11.0"
bandit = "^1.7.9"
safety = "^3.2.0"
pre-commit = "^3.8.0"

# Type Stubs
types-redis = "^4.6.0"
types-pyyaml = "^6.0.0"
types-aiofiles = "^24.1.0"

# Documentation
mkdocs = "^1.6.0"
mkdocs-material = "^9.5.0"
mkdocstrings = {extras = ["python"], version = "^0.25.0"}

# Development Tools
ipython = "^8.26.0"
ipdb = "^0.13.13"

[tool.poetry.group.production]
optional = true

[tool.poetry.group.production.dependencies]
gunicorn = "^23.0.0"
sentry-sdk = {extras = ["fastapi"], version = "^2.13.0"}

[tool.poetry.extras]
graphrag = ["lightrag-hku"]
memory = ["graphiti-core"]
all = ["lightrag-hku", "graphiti-core"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ============================================================================
# Tool Configurations
# ============================================================================

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/**/*" = ["S101", "PLR2004"]

[tool.ruff.isort]
known-first-party = ["src"]

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
namespace_packages = true
show_error_codes = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "qdrant_client.*",
    "neo4j.*",
    "redis.*",
    "langgraph.*",
    "langchain.*",
    "llama_index.*",
    "ollama.*",
    "graphiti_core.*",
    "lightrag_hku.*",
    "rank_bm25.*",
    "mcp.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
pythonpath = ["src"]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--strict-markers",
    "--tb=short",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "performance: Performance tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "@abstractmethod",
    "@abc.abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]
